ALGORITMOS

    Input -> A# -> Output

    Input: 1 -> A# -> 2
    Input: 2 -> A# -> 3
    ...
    Input: i -> A# -> i+1

    Algoritmo puede resolver dos tipos de problemas

        -> Local
        -> Global
    

    A#1 
    
        Input: 1 -> A#1 -> 2
        Input: 2 -> A#1 -> 3
        ...
        Input: 132 -> A#1 -> 542

        A#1 -> Resuelve todos los problemas hasta el Input: 131

    A# 

        Input: n -> A# -> n+1

    REPRESENTAR JS la solucion A#

    
    const algo_numeral = function (n){
        return n+1
    }

    f(n) = n+1


    const algo_01 = function (n){
        if(n > 131){
            return 542
        }
        return n+1
    }



    Input: 2 -> B# -> 12
    Input: 3 -> B# -> 4
    Input: 4 -> B# -> 14
    Input: 5 -> B# -> 6
    Input: 6 -> B# -> 16
    Input: 7 -> B# -> 8

    ...

    Input: 2n   -> Output: n+10 -> 2(1) -> 12
    Input: 2n+1 -> Output: n+1

    Si el input es par      -> n+10
    Si el input es impar    -> n+1

    EJERCICIO RAPIDO #1 

        -> Input: 10 -> A# -> Output: "1A0" -> [1,0]
        -> Input: 20 -> A# -> Output: "2B0" -> [2,0]
        -> Input: 1  -> A# -> Output: "1A"  -> [1]
        -> Input: 2  -> A# -> Output: "2B"
        -> Input: 3  -> A# -> Output: "3A"
        -> Input: 4  -> A# -> Output: "4B"
        -> Input: 12 -> A# -> Output: "1A2B" -> [1,2]

        Pensar: 
            -> Si encuentro 0 no hago nada

            -> Si el numero contiene un digito impar
                -> numero + "A"

            -> Si el numero contiene un digito par
                -> numero + "B"
        
        par: 2n
            n / 2  --> numero sin coma
        
        impar: 2n+1 
            n / 2  --> numero con decimales?


        123 -> 122 + 1 
        129 -> 128 + 1
    
    YA PUEDO VERIFICAR SI ES PAR O IMPAR

        par:    si n % 2 ---> 0
        impar:  si n % 2 != 0

    COMO DESCOMPONGO UN NUMERO EN DIGITOS

    10 -> [1,0] -> A# -> "1A0"
    12 -> [1,2] -> A# -> "1A2B"
    1  -> [1]   -> A# -> "1A"


    -> Un string es un array simplificado


    ALGORITMOS DE BUSQUEDA: 

    
    AGRUPAR: 

        Input: [1, 2, 3, "A", "A", "B", 2, 2] Output: [2, "A"]

        1. Dejar los elementos en comun 
        2. Eliminar los repetidos

        1. [2,"A","A",2,2]
        2. [2,"A"]

        Verificar que un elemento se repite en un array es c/u de las entradas Input[i]
        con TODO el Input

        CONTADOR = 0
        Input[i] ---> Input[0, ... j]
            -> Input[i] === Input[j]        

        
        Arr: [1,2] -> Arr x Arr 

        Arr[0] = 1 -> [1,2] Si el CONTADOR <= 1
        -> No hay repetidos en Arr

        Arr2: [1,1,2]

        Arr2[0] = 1 -> [1,1,2] Si el CONTADOR > 1
        -> Hay repetidos en Arr2 


